<!doctype html>
<!-- Auteur : David Roche @davR74130 -->
<html lang="fr">
	<head>
		<meta charset="utf-8">
		<title>Faire de la physique (et un peu de maths) avec Processing</title>
		<link rel="stylesheet" href="css/css/vendor/bootstrap.min.css">
		<link rel="stylesheet" href="css/css/flat-ui.min.css">
		<link rel="stylesheet" href="css/style.css">
        <link rel="stylesheet" href="highlight/styles/tomorrow-night.css">
    <script src="highlight/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="./css/js/vendor/jquery.min.js"></script>
    <script src="./css/js/flat-ui.min.js"></script>
    <script src="libProc/processing.min.js"></script>
    <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
    tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
  });
</script>
    <script type="text/javascript"
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-92673245-1', 'auto');
		ga('send', 'pageview');
	</script>
	</head>
	<body>
    <nav class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <span class="navbar-brand">Faire de la physique (et un peu de maths) avec Processing</span>
					<span class="navbar-brand">Activité 2</span>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li class="dropdown">
              <a href="./Fixed Top Navbar Example for Bootstrap_files/Fixed Top Navbar Example for Bootstrap.html" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Activités <span class="caret"></span></a>
              <ul class="dropdown-menu" role="menu">
                <li><a href="./procPhy_a1.html">Activité 1</a></li>
                <li><a href="./procPhy_a3.html">Activité 3</a></li>
                <li><a href="./procPhy_a4.html">Activité 4</a></li>
                <li><a href="./procPhy_a5.html">Activité 5</a></li>
                <li><a href="./procPhy_a6.html">Activité 6</a></li>
              </ul>
            </li>
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <li><a href="procPhy_a1.html"><span class="fui-triangle-left-large"></a></li>
            <li><a href="procPhy_a3.html"><span class="fui-triangle-right-large"></a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>
    <div class="container act">
        <p>Nous allons commencer par faire un peu de physique, plus exactement, nous allons évoquer une "branche" de la physique qui se nomme "mécanique du point".</p>
        <p>Soit un mobile (objet qui peut se déplacer) M que l'on considérera comme ponctuel (on pourra raisonner comme si c'était un point au sens mathématique du terme, même si à l'écran ce n'en est pas un).</p>
        <p>Nous avons déjà étudié ce genre de problème dans la série d'activités <a href="procAn_a1.html" target="_blank">"animation avec Processing"</a> avec une balle qui se déplaçait. Dans ces activités, nous nous intéressions  aux coordonnées (x,y) de la balle que nous modifions à chaque nouvelle image (ce qui donnait l'illusion du mouvement).</p>
        <p>Cette fois, nous n'allons pas (directement) travailler avec les coordonnées du mobile M (notre balle), mais nous allons définir un vecteur "position" $\vec{OM}$ (le point O est l'origine du repère).</p>
        <p>Si vous réfléchissez un peu, vous allez vite vous rendre compte que cela ne change strictement rien : les coordonnées du point M et les coordonnées du vecteur $\vec{OM}$ sont identiques. Pour l'instant, on ne voit pas trop l'intérêt de raisonner avec un vecteur $\vec{OM}$ au lieu de raisonner directement sur les coordonnées du point M !</p>
        <p>Commençons à programmer :</p>
        <p>Nous allons utiliser la programmation orientée objet en créant une classe "Mobile". Par souci de clarté, nous allons séparer notre programme principal et notre classe "Mobile" en "rangeant" notre classe dans un fichier à part : nous aurons notre programme principal dans un fichier (par exemple nommé "phy_a2_1.pde") et notre classe "Mobile" dans un autre fichier (nommé "Mobile.pde").</p>
        <h4>À faire vous-même 2.1</h4>
        <p>Après avoir ouvert Processing, enregistrez le fichier (même si pour l'instant, il est "vide") en faisant "File->Save", donnez lui pour nom "phy_a2_1". Cliquez ensuite sur la petite flèche se trouvant juste à côté de l'onglet "phy_a2_1" :</p>
        <img src="img/procPhy_a2_1.png" alt="proc">
        <p>Cliquez sur "New Tab", puis choisissez pour nom "Mobile".</p>
        <hr>
        <p>Vous devriez maintenant avoir 2 onglets : un onglet "phy_a2_1" et un onglet "Mobile".</p>
        <h4>À faire vous-même 2.1</h4>
        <p>Saisissez, analyser et testez ce code</p>
        <p>Mobile.pde</p>
        <pre><code>
class Mobile {
  PVector OM;
  Mobile(){
    OM = new PVector(width/2,height/2);
  }
  void affiche(){
    fill(0);
    ellipse(OM.x,OM.y,20,20);
  }
}
        </code></pre>
        <p>phy_a2_1.pde</p>
        <pre><code>
Mobile mob;
void setup(){
  size(200,200);
  mob=new Mobile();
}
void draw(){
  background(255);
  mob.affiche();
}
        </code></pre>
        <hr>
        <p>A part l'utilisation du vecteur $\vec{OM}$, une seule chose nouvelle dans cet exemple : l'utilisation des variables "width" et "height" qui sont des variables "Processing". "width" et "height" ont respectivement pour valeur la largeur de la fenêtre (en pixel) et la hauteur de la fenêtre (en pixel). Les "width/2" et "height/2" permettent donc de placer notre mobile au centre de la fenêtre (quels que soit les paramètres de la fonction "size").</p>
        <p>Remarques : </p>
        <ul>
            <li>les fichiers "Mobile.pde" et "phy_a2_1.pde" se trouvant dans le même dossier, il est possible d'utiliser directement la classe "Mobile" dans le fichier "phy_a2_1.pde" sans "importer" quoi que ce soit.</li>
            <li>dans la suite, nous allons simplement compléter les fichiers "Mobile.pde" et "phy_a2_1.pde", la structure de base restant identique</li>
        </ul>
        <p>Notre mobile M (balle) va maintenant se déplacer.</p>
        <p>Nouvelle incursion dans le monde de la "mécanique du point" :</p>
        <p>Qui dit déplacement, dit introduction de la notion de temps ("il était là et l'instant suivant il est ici !")</p>
        <p>Nous allons aussi introduire le vecteur "déplacement" : $d\vec{OM}$.</p>
        <p>Soit $\vec{OM}(t)$ le vecteur position du mobile M à l'instant t et $\vec{OM}(t+dt)$ le vecteur position du mobile M à l'instant t+dt.</p>
        <img src="img/procPhy_a2_2.png" alt="proc">
        <p>Pendant dt seconde, le mobile s'est déplacé comme indiqué ci-dessus.</p>
        <p>Par définition : $\vec{OM}(t+dt)=\vec{OM}(t)+d\vec{OM}$</p>
        <p>Si l'on connaît la position de M à l'instant t ($\vec{OM}(t)$) et si l'on connaît le vecteur deplacement $d\vec{OM}$ (déplacement pendant la durée dt), on pourra donc calculer la nouvelle position du mobile M à l'instant t+dt ($\vec{OM}(t+dt)$)</p>
        <p>Une question vient immédiatement ! Comment calculer $d\vec{OM}$ ?</p>
        <p>Pour répondre à cette question, nous allons devoir introduire le vecteur vitesse.</p>
        <p>La vitesse, vous connaissez, mais le vecteur vitesse $\vec{v}$, peut-être pas ?</p>
        <p>Pour commencer, la norme du vecteur vitesse $||\vec{v}||$ correspond à la vitesse telle que vous la connaissez (quotient de la distance parcourue par le temps mis pour parcourir cette distance) en mètre par seconde ou encore en kilomètre par heure.</p>
        <p>Pour le reste, vous avez juste besoin de savoir que : $d\vec{OM}=\vec{v}.dt$ (le point . représente ici une multiplication, nous avons le produit d'un vecteur ($\vec{v}$) par un réel (la durée dt))</p>
        <p>Essayons de "traduire" tout cela afin de l'inclure dans notre programme.</p>
        <p>Première question à se poser : que va représenter la durée dt dans notre programme ?</p>
        <p>dt représente, en quelque sorte, la durée qui s'écoule entre 2 calculs du vecteur position $\vec{OM}$. Dans notre programme, nous allons calculer le vecteur position toutes les dt secondes.</p>
        <p>Sachant qu'en général, les calculs sont effectués à chaque nouvelle image, la durée dt va correspondre au temps qui s'écoule entre 2 images.</p>
        <p>Comment calculer cela dans Processing ?</p>
        <p>Rappelez-vous que nous avons à notre disposition la variable Processing "frameRate" qui nous donne le nombre d'images par seconde. J'espère qu'il sera donc évident pour vous que :</p>
        <pre><code>
float dt=1/frameRate;
        </code></pre>
        <p>si vous n'êtes pas convaincu, faites un simple produit en croix.</p>
        <p>Maintenant que le vecteur position de notre mobile M va évoluer avec le temps, nous allons introduire une nouvelle méthode à notre classe "Mobile" : la méthode "update" qui sera donc "chargée" d'actualiser le vecteur $\vec{OM}$.</p>
        <h4>À faire vous-même 2.2</h4>
        <p>En repartant du "À faire vous-même 2.1", saisissez, analysez et testez ce code :</p>
        <p>Mobile.pde</p>
        <pre><code>
class Mobile {
  PVector OM;
  //création du vecteur "déplacement"
  PVector dOM;
  //création du vecteur vitesse
  PVector v;
  Mobile(){
    OM = new PVector(10,height/2);
    dOM = new PVector();
    v = new PVector();
  }
  void affiche(){
    fill(0);
    ellipse(OM.x,OM.y,20,20);
  }
  void update(float dt){
    //permet d'avoir dOM=v.dt
    dOM = PVector.mult(v,dt);
    //permet d'actualiser le vecteur position du mobile M (équivalent à "OM(t+dt)=OM(t)+dOM")
    OM.add(dOM);
  }
}
        </code></pre>
        <p>phy_a2_1.pde</p>
        <pre><code>
Mobile mob;
void setup(){
  size(200,200);
  mob=new Mobile();
}
void draw(){
  background(255);
  float dt=1/frameRate;
  mob.update(dt);
  mob.affiche();
}
        </code></pre>
        <hr>
        <p>Notre mobile ne bouge toujours pas, pourquoi ?</p>
        <p>Tout simplement parce que le vecteur vitesse $\vec{v}$ est un vecteur nul.</p>
        <h4>À faire vous-même 2.3</h4>
        <p>Remplacez la ligne "v = new PVector();" par la ligne "v = new PVector(20,0);". Testez le résultat de cette modification.</p>
        <hr>
        <p>Quelle est l'unité de la norme du vecteur vitesse dans notre programme ? Réponse : le pixel par seconde.</p>
        <p>Avec "v = new PVector(20,0);" nous avons $||\vec{v}||$ = 20 pixels par seconde.</p>
        <h4>À faire vous-même 2.4</h4>
        <p>Modifiez le programme du "À faire vous-même 2.2" pour que le mobile M se déplace en diagonale.</p>
        <hr>
        <p>Pour l'instant, le mobile M "sort" de la fenêtre.</p>
        <h4>À faire vous-même 2.5</h4>
        <p>Modifiez le programme du "À faire vous-même 2.5" (particulièrement la méthode "update" de la classe "Mobile") pour que le mobile M rebondisse sur les bords de la fenêtre (les rebonds doivent être réalistes).</p>
        <canvas id="a2_5" class="proc" data-processing-sources="code/phy_a2_5.pde"></canvas>
        <p>Cliquez <a href="procPhy_c_a2_5.html" target="_blank">ici</a> pour voir la "correction"</p>
        <hr>
        <p>Autre grandeur fondamentale en mécanique du point, le vecteur accélération $\vec{a}$</p>
        <p>C'est l'accélération qui permet de modifier le vecteur vitesse (dans la vie courante, le terme accélération est lié à une augmentation de la vitesse, ce n'est pas forcement le cas en physique : le vecteur accélération peut provoquer une diminution de la norme du vecteur vitesse).</p>
        <p>La relation à prendre en compte est la suivante :</p>
        <p>$\vec{v}(t+dt)=\vec{v}(t)+d\vec{v}$ avec $d\vec{v}$ le vecteur "variation de la vitesse", qui correspond, à la variation du vecteur vitesse pendant le temps dt.</p>
        <p>Le vecteur "variation de vitesse" vérifie la relation : $d\vec{v}=\vec{a}.dt$ avec $\vec{a}$ l'accélération.</p>
        <p>Ces relations ressemblent beaucoup aux relations qui lient le vecteur position, le vecteur déplacement et le vecteur vitesse (voir au début de cette activité).</p>
        <p>La norme du vecteur accélération a pour unité (dans le système international) "le mètre par seconde par seconde". Dans nos programmes, il faudra utiliser le "pixel par seconde par seconde".</p>
        <h4>À faire vous-même 2.6</h4>
        <p>Saisissez, analysez et testez ce code :</p>
        <p>Mobile.pde</p>
        <pre><code>
class Mobile {
  PVector OM;
  PVector dOM;
  PVector v;
  //création du vecteur variation de vitesse
  PVector dv;
  //création du vecteur accélération
  PVector a;
  Mobile(){
    OM = new PVector(10,height/2);
    dOM = new PVector();
    v = new PVector();
    dv = new PVector();
    a = new PVector();
  }
  void affiche(){
    fill(0);
    ellipse(OM.x,OM.y,20,20);
  }
  void update(float dt){
    //calcul du vecteur dv
    dv = PVector.mult(a,dt);
    //calcul du nouveau vecteur vitesse
    v.add(dv);
    dOM = PVector.mult(v,dt);
    OM.add(dOM);
  }
}
        </code></pre>
        <p>phy_a2_1.pde</p>
        <pre><code>
Mobile mob;
void setup(){
  size(200,200);
  mob=new Mobile();
}
void draw(){
  background(255);
  float dt=1/frameRate;
  mob.update(dt);
  mob.affiche();
}
        </code></pre>
        <hr>
        <p>Comme vous pouvez le constater, rien ne bouge : la vitesse de départ et nulle et l'accélération de départ est nulle.</p>
        <h4>À faire vous-même 2.7</h4>
        <p>Modifiez le code vu dans le "À faire vous-même 2.6" pour que l'accélération est pour coordonnées (50,0)</p>
        <hr>
        <p>Le mobile accélère bien : sa vitesse augmente de 50 pixels par seconde toutes les secondes.</p>
    </div>
	</body>
</html>
